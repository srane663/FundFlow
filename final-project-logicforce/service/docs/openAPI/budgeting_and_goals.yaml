openapi: 3.0.3
info:
  title: Expense Tracking API - Budgeting and Goal Setting
  description: >
    This API allows authenticated users to manage their monthly or weekly budgets and financial goals. 
    It supports creating, retrieving, updating, and deleting budgets and goals. Each operation is tied to a specific user 
    via their unique user ID, ensuring data is securely handled.
  version: '1.0'
servers:
  - url: http://localhost:9000
    description: Local development environment for testing the API.

paths:
  /users/{userId}/budgets:
    post:
      summary: Create a Budget
      operationId: createBudget
      description: >
        Allows an authenticated user to create a budget for a specific category. 
        The `userId` in the URL must match the authenticated user's ID provided in the token.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: "12345"
          description: The unique ID of the user creating the budget.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
            example:
              category: "Groceries"
              frequency: "monthly"
              limitAmount: 500.00
              startDate: "2024-01-01"
              endDate: "2024-12-31"
      responses:
        201:
          description: Budget successfully created.
        400:
          description: Invalid request or missing required fields.
        403:
          description: User is not authorized to create the budget.
        500:
          description: Server error.

    get:
      summary: Retrieve Budgets
      operationId: getBudgets
      description: >
        Allows an authenticated user to retrieve all budgets associated with their account.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: "12345"
          description: The unique ID of the user retrieving their budgets.
      responses:
        200:
          description: Budgets retrieved successfully.
        403:
          description: User is not authorized to retrieve budgets.
        500:
          description: Server error.

  /users/{userId}/budgets/{budgetId}:
    get:
      summary: Retrieve a Specific Budget
      operationId: getBudgetById
      description: >
        Allows an authenticated user to retrieve a specific budget by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the user retrieving the budget.
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the budget to be retrieved.
      responses:
        200:
          description: Budget retrieved successfully.
        404:
          description: Budget not found.
        403:
          description: User is not authorized to retrieve the budget.
        500:
          description: Server error.

    put:
      summary: Update a Budget
      operationId: updateBudget
      description: >
        Allows an authenticated user to update an existing budget. 
        The `budgetId` must correspond to a valid budget belonging to the user.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the user updating the budget.
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the budget to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
      responses:
        200:
          description: Budget updated successfully.
        404:
          description: Budget not found.
        403:
          description: User is not authorized to update the budget.
        500:
          description: Server error.

    delete:
      summary: Delete a Budget
      operationId: deleteBudget
      description: >
        Allows an authenticated user to delete an existing budget. 
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the user deleting the budget.
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the budget to be deleted.
      responses:
        204:
          description: Budget successfully deleted.
        404:
          description: Budget not found.
        403:
          description: User is not authorized to delete the budget.
        500:
          description: Server error.

components:
  schemas:
    Budget:
      type: object
      required:
        - category
        - frequency
        - limitAmount
        - startDate
      properties:
        category:
          type: string
        frequency:
          type: string
          enum: [weekly, monthly]
        limitAmount:
          type: number
          format: double
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
