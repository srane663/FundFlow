openapi: 3.0.3
info:
  title: Expense Tracking API - User Management
  description: >
    API for managing users, including registration, login, password resets, and account deletion.
  version: '1.0'
servers:
  - url: http://localhost:9000
    description: Local development environment

paths:
  /users/register:
    post:
      operationId: registerUser
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            example:
              email: "user@example.com"
              password: "securePassword123"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingField:
                  value:
                    errorCode: "400_BAD_REQUEST"
                    message: "Required field is missing or invalid."

  /users/login:
    post:
      operationId: loginUser
      summary: Log in an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              email: "user@example.com"
              password: "securePassword123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  value:
                    errorCode: "401_UNAUTHORIZED"
                    message: "Invalid email or password."

  /users/{userId}:
    delete:
      operationId: deleteUser
      summary: Delete a user
      description: Delete a user account by their unique ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to delete
      responses:
        204:
          description: User deleted successfully
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  value:
                    errorCode: "404_NOT_FOUND"
                    message: "The specified user does not exist."
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    errorCode: "500_INTERNAL_SERVER_ERROR"
                    message: "An unexpected error occurred while processing the request."

  /users/{userId}/reset-password:
    put:
      operationId: resetPassword
      summary: Reset user password
      description: Reset a user's password by their unique ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose password is being reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
            example:
              newPassword: "newSecurePassword123"
      responses:
        200:
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  value:
                    errorCode: "404_NOT_FOUND"
                    message: "The user ID provided does not exist."
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    errorCode: "500_INTERNAL_SERVER_ERROR"
                    message: "An error occurred while resetting the password."

components:
  schemas:
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "securePassword123"

    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "securePassword123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"

    UserResponse:
      type: object
      properties:
        userId:
          type: string
          example: "user12345"
        email:
          type: string
          example: "user@example.com"

    PasswordReset:
      type: object
      properties:
        newPassword:
          type: string
          example: "newSecurePassword123"

    PasswordResetResponse:
      type: object
      properties:
        message:
          type: string
          example: "Password reset successfully"
        user:
          type: object
          properties:
            userId:
              type: string
              example: "user12345"
            email:
              type: string
              example: "user@example.com"

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          example: "404_NOT_FOUND"
        message:
          type: string
          example: "The specified user does not exist."
